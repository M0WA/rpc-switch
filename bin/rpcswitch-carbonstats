#!/usr/bin/env perl

use Mojo::Base -base;

# more mojo
use Mojo::JSON qw(decode_json encode_json);
use Mojo::Log;

# core perl
use Cwd qw(realpath);
use Data::Dumper;
use Encode qw(decode_utf8 encode_utf8);
use FindBin;
use Getopt::Long;
use Sys::Hostname qw();
use Time::HiRes qw(time);

# cpan
use Config::Tiny; 
use RPC::Switch::Client 0.01;

# lazy globals
my ($cfg, $client, $ioloop, $log);

exit main(@ARGV);

sub main {
	my $cfgfile = realpath("$FindBin::Bin/../etc/config-carbonstats.pl");
	my $debug = 1;

	GetOptions(
		'config=s' => \$cfgfile,
		'debug' => \$debug,
	) or return usage();

	
	{
		my $slurp = Mojo::File->new($cfgfile)->slurp();
		local $@;
		eval $slurp;
		die "failed to load config $cfgfile: $@\n" if $@;
		die "empty config $cfgfile?" unless $cfg;
	}

	$log = Mojo::Log->new(level => ($debug) ? 'debug' : 'info');

	$client = RPC::Switch::Client->new(
		%{ $cfg->{'rpc-switch'} },
		json => 0,
		debug => $debug,
		log => $log,
	) or die 'no client?';

	$ioloop = Mojo::IOLoop->singleton();

	my $tmr = $ioloop->recurring(60 => \&do_stats);

	#return $client->work();
	# meh.. cannot use work() because we have no methods
	# so no ping timer at the api side

	# hack alert: (ab)using the internals
	$client->{_exit} = RPC::Switch::Client::WORK_OK;
	$ioloop->start();

	return $client->{_exit};
}

sub usage {
	print <<'EOT';
rpc-switch-statsdings options:
--config=<file>  specify configuration file
--debug          enable debugging

EOT
	return 1;
}



sub do_stats {
	#say 'do_stats1!';
	$ioloop->delay(sub{
		my ($d) = @_;
		#say 'do_stats2!';
		$client->call_nb(
			method => 'rpcswitch.get_stats',
			inargs => {},
			resultcb => $d->begin(0),
		);
	}, sub {
		my ($d, $status, $outargs) = @_;
		#say 'do_stats3!';
		unless ($status and $status eq RPC::Switch::Client::RES_OK) {
			die "huuh: status " . ($status // '<undef>') . ' : ' . ($outargs // '');
		}
		$d->pass($outargs),
		$ioloop->client(
			address => $cfg->{carbon}->{server},
			port => $cfg->{carbon}->{port} // 2003,
			$d->begin(),
		);
	}, sub {
		my ($d, $outargs, $err, $stream) = @_;
		#say 'do_stats4! ', Dumper($outargs);
		die $err if $err;
		$stream->on(drain => $d->begin(0));
		keys %$outargs;
		my $hostname = $cfg->{carbon}->{hostname} // Sys::Hostname::hostname();
		while (my ($k,$v) = each %$outargs) {
			$_ = "rpcswitch.$hostname.$k $v ". int(time()) . "\n";
			say;
			$stream->write($_);
		}
	}, sub {
		my ($d, $stream) = @_;
		#say 'do_stats5!';
		$stream->close_gracefully();
	})->catch(sub{
		my @reason = @_;
		warn "Something went wrong: $reason[0]";
	});
	#say 'do_stats-1!';
}


1;


